//file:noinspection GroovyUnusedAssignment
node {
	version = '16.16.0'
}

antora {
	version = '3.2.0-alpha.2'
	playbook = file('src/main/antora/antora-playbook.yml')
	options = ['to-dir' : project.layout.buildDirectory.dir('site').get().toString(), clean: true, fetch: !project.gradle.startParameter.offline, stacktrace: true]
	environment = [
			'ALGOLIA_API_KEY': '9d489079e5ec46dbb238909fee5c9c29',
			'ALGOLIA_APP_ID': 'WB1FQYI187',
			'ALGOLIA_INDEX_NAME': 'springdocs',
	]
	dependencies = [
			'@antora/atlas-extension': '1.0.0-alpha.1',
			'@antora/collector-extension': '1.0.0-alpha.3',
			'@asciidoctor/tabs': '1.0.0-beta.3',
			'@springio/antora-extensions': '1.7.0',
			'@springio/asciidoctor-extensions': '1.0.0-alpha.8',
	]
}

tasks.named("generateAntoraYml") {
	asciidocAttributes = project.provider( { generateAttributes() } )
	baseAntoraYmlFile = file('src/main/antora/antora.yml')
}

tasks.create(name: 'createAntoraPartials', type: Sync) {
	from { project(":spring-pulsar-docs").tasks.generateObservabilityDocs.outputs }
	into layout.buildDirectory.dir('generated-antora-resources/modules/ROOT/partials')
}

tasks.create('generateAntoraResources') {
	dependsOn 'createAntoraPartials'
	dependsOn 'generateAntoraYml'
}

def generateAttributes() {
	def versionCatalog = extensions.getByType(VersionCatalogsExtension).named("libs")
	def springBootVersionForDocs = versionCatalog.findVersion("spring-boot-for-docs").orElseThrow().displayName
	def springFrameworkVersion = versionCatalog.findVersion("spring").orElseThrow().displayName
	def springCloudStreamVersion = versionCatalog.findVersion("spring-cloud-stream").orElseThrow().displayName
	def pulsarClientVersion = versionCatalog.findVersion("pulsar").orElseThrow().displayName
	def pulsarClientReactiveVersion = versionCatalog.findVersion("pulsar-reactive").orElseThrow().displayName
	return ['is-snapshot-version': project.version.endsWith("-SNAPSHOT"),
			'pulsar-client-version': pulsarClientVersion ?: 'current',
			'pulsar-client-reactive-version': pulsarClientReactiveVersion ?: 'current',
			'spring-boot-version': springBootVersionForDocs ?: 'current',
			'spring-cloud-stream-version': springCloudStreamVersion ?: 'current',
			'spring-framework-version': springFrameworkVersion ?: 'current',
			'spring-pulsar-version': project.version]
}
