plugins {
	id 'org.springframework.pulsar.spring-module'
	id "de.undercouch.download" version "5.3.0"
	id 'spring-pulsar.integration-test-conventions'
}

description = 'Spring Pulsar Support'

dependencies {
	api 'io.micrometer:micrometer-observation'
	api ('org.apache.pulsar:pulsar-client-all') {
		exclude group: 'org.apache.logging.log4j'
		exclude group: 'com.sun.activation', module: 'javax.activation'
		exclude group: 'javax.validation', module: 'validation-api'
	}
	api 'org.springframework:spring-context'
	api 'org.springframework:spring-messaging'
	api 'org.springframework:spring-tx'
	api ('org.springframework.retry:spring-retry') {
		exclude group: 'org.springframework'
	}
	api project(':spring-pulsar-cache-provider')
	implementation project(path: ':spring-pulsar-cache-provider-caffeine', configuration: 'shadow')
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.google.code.findbugs:jsr305'
	optional 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
	optional 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	optional 'com.fasterxml.jackson.datatype:jackson-datatype-joda'
	optional 'com.google.protobuf:protobuf-java'
	optional 'com.jayway.jsonpath:json-path'

	testImplementation project(':spring-pulsar-test')
	testRuntimeOnly 'ch.qos.logback:logback-classic'
	testImplementation 'io.micrometer:micrometer-observation-test'
	testImplementation 'io.micrometer:micrometer-tracing-bridge-brave'
	testImplementation 'io.micrometer:micrometer-tracing-test'
	testImplementation 'io.micrometer:micrometer-tracing-integration-test'
	testImplementation 'org.assertj:assertj-core'
	testImplementation 'org.awaitility:awaitility'
	testImplementation 'org.hamcrest:hamcrest'
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation 'org.springframework:spring-test'
	testImplementation 'org.springframework.boot:spring-boot-test'

	intTestImplementation 'org.springframework.boot:spring-boot-starter-amqp'
	intTestImplementation 'org.springframework.pulsar:spring-pulsar-spring-boot-starter'
	intTestImplementation 'org.testcontainers:junit-jupiter'
	intTestImplementation 'org.testcontainers:pulsar'
	intTestImplementation 'org.testcontainers:rabbitmq'
}

test {
	testLogging.showStandardStreams = true
}

integrationTest {
	maxHeapSize '2048m'
}

task downloadRabbitConnector {
	onlyIf {
		System.getProperty("downloadRabbitConnector") == "true"
	}
	doLast {
		try {
			download.run {
				println "Downloading Rabbit connector to 'src/intTest/resources/connectors/' (one time only if not already downloaded)..."
				src 'https://archive.apache.org/dist/pulsar/pulsar-2.10.2/connectors/pulsar-io-rabbitmq-2.10.2.nar'
				dest "$buildDir/../src/intTest/resources/connectors/pulsar-io-rabbitmq-2.10.2.nar"
				overwrite false
			}
		} catch (Exception ex) {
			println "Failed to download rabbit connector: $ex"
		}
	}
}

project.afterEvaluate {
	compileTestJava.dependsOn downloadRabbitConnector
}
