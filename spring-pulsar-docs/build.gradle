plugins {
	id 'org.springframework.pulsar.spring-docs-module'
	id 'org.asciidoctor.jvm.convert'
}

description = 'Spring Pulsar Docs'

configurations {
	configurationProperties
}

dependencies {
	api project (':spring-pulsar')
	api 'org.springframework.boot:spring-boot-starter'
	configurationProperties(project(path: ":spring-pulsar-spring-boot-autoconfigure", configuration: "configurationPropertiesMetadata"))
}

task aggregatedJavadoc(type: Javadoc) {
	group = 'Documentation'
	description = 'Generates aggregated Javadoc API documentation.'
	title = "${rootProject.description} ${version} API"

	project.rootProject.gradle.projectsEvaluated {
		Set<String> excludedProjects = ['spring-pulsar-sample-apps']
		Set<Project> publishedProjects = rootProject.subprojects.findAll { it != project}
			.findAll { it.plugins.hasPlugin(JavaPlugin) && it.plugins.hasPlugin(MavenPublishPlugin) }
			.findAll { !excludedProjects.contains(it.name) }
		dependsOn publishedProjects.javadoc
		source publishedProjects.javadoc.source
		classpath = project.files(publishedProjects.javadoc.classpath)
		destinationDir = project.file "${buildDir}/api"
		options {
			encoding = "UTF-8"
			author = true
			docTitle = "Spring Pulsar ${project.version} API"
			windowTitle = "Spring Pulsar ${project.version} API"
			overview = 'src/api/overview.html'
			memberLevel = JavadocMemberLevel.PROTECTED
			outputLevel = JavadocOutputLevel.QUIET
			splitIndex = true
			use = true
			addBooleanOption('Xdoclint:syntax', true) // only check syntax with doclint
			links = [
				"https://docs.oracle.com/en/java/javase/17/docs/api/",
				"https://docs.spring.io/spring-framework/docs/current/javadoc-api/"
			]
		}
	}
}

task documentConfigurationProperties(type: org.springframework.pulsar.gradle.docs.configprops.DocumentConfigurationProperties) {
	configurationPropertyMetadata = configurations.configurationProperties
	outputDir = file("${buildDir}/docs/generated/")
}

tasks.withType(org.asciidoctor.gradle.jvm.AbstractAsciidoctorTask) {
	asciidoctorj {
		fatalWarnings = ['^((?!successfully validated).)*$']
	}
}

asciidoctor {
	sources {
		include "*.singleadoc"
	}
}

task asciidoctorPdf(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
	sources {
		include "*.adoc"
	}
}

task asciidoctorMultipage(type: org.asciidoctor.gradle.jvm.AsciidoctorTask) {
	sources {
		include "*.adoc"
	}
}

syncDocumentationSourceForAsciidoctor {
	dependsOn documentConfigurationProperties
	from("${buildDir}/docs/generated") {
		into "asciidoc"
	}
	from("src/main/java") {
		into "main/java"
	}
}

syncDocumentationSourceForAsciidoctorMultipage {
	dependsOn documentConfigurationProperties
	from("${buildDir}/docs/generated") {
		into "asciidoc"
	}
	from("src/main/java") {
		into "main/java"
	}
}

syncDocumentationSourceForAsciidoctorPdf {
	dependsOn documentConfigurationProperties
	from("${buildDir}/docs/generated") {
		into "asciidoc"
	}
	from("src/main/java") {
		into "main/java"
	}
}

task asciidocs {
	dependsOn asciidoctor, asciidoctorMultipage, asciidoctorPdf
}

task docsZip(type: Zip) {
	dependsOn asciidocs
	group = 'Distribution'
	archiveClassifier = 'docs'
	description = "Builds docs archive containing api and reference for deployment at static.spring.io/spring-pulsar/docs."
	duplicatesStrategy "fail"
	from(asciidoctor.outputDir) {
		into "reference/htmlsingle"
	}
	from(asciidoctorPdf.outputDir) {
		into "reference/pdf"
		include "index.pdf"
		rename { "spring-pulsar-reference.pdf" }
	}
	from(asciidoctorMultipage.outputDir) {
		into "reference/html"
	}
	from(aggregatedJavadoc) {
		into "api"
	}
}

artifacts {
	archives docsZip
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact docsZip
		}
	}
}

artifactoryPublish {
	publications(publishing.publications.mavenJava)
}
