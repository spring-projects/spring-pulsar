plugins {
	id "java-gradle-plugin"
	id 'groovy-gradle-plugin'
	id "java"
	id "groovy"
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

new File(new File("$projectDir").parentFile, "gradle.properties").withInputStream {
	def properties = new Properties()
	properties.load(it)
	ext.set("springFrameworkVersion", properties["springFrameworkVersion"])
	if (properties["springFrameworkVersion"].contains("-")) {
		repositories {
			maven { url "https://repo.spring.io/milestone" }
			maven { url "https://repo.spring.io/snapshot" }
		}
	}
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
	main {
		java { srcDirs = [] }
		groovy { srcDirs += ['src/main/java'] }
	}
}

configurations {
	implementation {
		exclude module: 'groovy-all'
	}
}

dependencies {
	implementation localGroovy()
	implementation 'commons-codec:commons-codec:1.15'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'
	implementation 'io.github.gradle-nexus:publish-plugin:1.1.0'
	implementation("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.34")
	implementation 'io.spring.nohttp:nohttp-gradle:0.0.10'
	implementation "org.apache.maven:maven-embedder:3.6.2"
	implementation "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
	implementation 'org.codehaus.groovy:groovy-all:2.5.17'
	implementation 'org.jfrog.buildinfo:build-info-extractor-gradle:4.31.9'
	implementation "org.gradle:test-retry-gradle-plugin:1.4.0"
	implementation 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1'
	implementation(platform("org.springframework:spring-framework-bom:${springFrameworkVersion}"))
	implementation 'org.springframework:spring-core'
	implementation 'org.springframework:spring-web'
}

gradlePlugin {
	plugins {
		artifactoryPlugin {
			id = "io.spring.convention.artfiactory"
			implementationClass = "io.spring.gradle.convention.ArtifactoryPlugin"
		}
		jacocoConventionsPlugin {
			id = "org.springframework.pulsar.jacoco"
			implementationClass = "org.springframework.pulsar.gradle.check.JacocoConventionsPlugin"
		}
		optionalDependenciesPlugin {
			id = "org.springframework.pulsar.optional-dependencies"
			implementationClass = "org.springframework.pulsar.gradle.optional.OptionalDependenciesPlugin"
		}
		repositoryConventionPlugin {
			id = "io.spring.convention.repository"
			implementationClass = "io.spring.gradle.convention.RepositoryConventionPlugin"
		}
		rootProjectPlugin {
			id = "org.springframework.pulsar.root-project"
			implementationClass = "org.springframework.pulsar.gradle.RootProjectPlugin"
		}
		springDocsModulePlugin {
			id = "org.springframework.pulsar.spring-docs-module"
			implementationClass = "org.springframework.pulsar.gradle.SpringDocsModulePlugin"
		}
		springModulePlugin {
			id = "org.springframework.pulsar.spring-module"
			implementationClass = "org.springframework.pulsar.gradle.SpringModulePlugin"
		}
		sonarQubeConventionsPlugin {
			id = "org.springframework.pulsar.sonarqube"
			implementationClass = "org.springframework.pulsar.gradle.check.SonarQubeConventionsPlugin"
		}
		updateProjectVersion {
			id = "org.springframework.pulsar.update-version"
			implementationClass = "org.springframework.pulsar.gradle.versions.UpdateProjectVersionPlugin"
		}
	}
}
